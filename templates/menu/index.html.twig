{% extends 'base.html.twig' %}

{% block title %}The District{% endblock %}

{% block body %}
{# {% block importmap %}   #}
  {# {{ asset ('vue') }} #}

 {# {{ encore_entry_link_tags ('main') }}  #}

{# {% endblock %} #}
{% block stylesheets %}	
<link rel="stylesheet" href="{{ asset('css/style.css')}}">

<style >
{# import {from} 'https://raw.githubusercontent.com/JohnBlazek/codepen-resources/master/3d-carousel/js/libs.min.js';  #}



/*header
{
	
	margin-top:30px;
	position:absolute;
	z-index:5;
	width:420px;
	padding-top:10px;
	padding-bottom:10px;

}*/

{# h1{
	
	font-size:36px;
	letter-spacing:-2.5px;
	margin-left:30px;
}

h3{
	
	font-size:16px;
	letter-spacing:-1.5px;
	margin-top:5px;
	margin-left:35px;
} #}

{# #fps
{
	margin-top:5px;
	margin-left:35px;
} #}

{# .carous {
  position: relative;
 
  justify-content: center;
  width: auto;
  padding-left: 50px;
  align-items: center;
  z-index: 1000;

} #}

/* hardware accelatator class */	
.trans3d
	{
		-webkit-transform-style: preserve-3d;
		-webkit-transform: translate3d(0, 0, 0);
		-moz-transform-style: preserve-3d;
		-moz-transform: translate3d(0, 0, 0);
		-ms-transform-style:preserve-3d;
		-ms-transform: translate3d(0, 0, 0);
		transform-style:preserve-3d;
		transform: translate3d(0, 0, 0);

	/*	-webkit-backface-visibility: hidden;
		-moz-backface-visibility: hidden;
		-ms-backface-visibility:hidden;
		backface-visibility:hidden;*/
	}
	


	#contentContainer
	{
		position:absolute;
		margin-left:-500px;
		margin-top:-500px;
		left: 50%;
		top:50%;
		width:100%;
		height:600px;
	}
	
	#carouselContainer
	{
		position:absolute;
		margin-left:-700px;
		margin-top:-450px;
		left:50%;
		top:60%;
		width:100%;
		height:600px;
	}
	
	.carouselItem
	{
		width:300px;
		height:380px;
		position:absolute;
		left:50%;
		top:50%;
		margin-left:-120px;
     margin-right:120px;
		margin-top:-90px;
		visibility:hidden;
	}
	
  .carouselItemInner 
	{
    width: 300px;
		height:380px;
		position:absolute;
    border-radius: 15px 15px 15px 15px;
		justify-content: center;
		font-size:67px;
		left:43%;
		top:30%;
		margin-left:-120px;
    margin-right:120px;
		margin-top:-90px;
		text-align:center;
		
    overflow:hidden;
  }

 a 
{
	color:rgba( 255, 255, 255, 1.45 );
	text-decoration: none;
text-shadow: -1px -1px 4px rgba(0, 0, 0, .35);

}

a:hover
{
	color:rgba( 255, 255, 255, 3 );
}

  a .carouselItemInner .title 
	{
    display: flex;
    position: relative;
    justify-items: center;
    vertical-align: center;
  overflow: hidden;
    justify-content: center;
		font-family: 'quicksandlight', Helvetica, Arial;
	  font-style: white;
	  text-shadow: -1px -1px 4px rgba(0, 0, 0, .35);
    filter: dropshadow(color=#000FFF, offx=1, offy=1);
		
		text-align:center;
		
  }



{# @media (max-width: 768px) {
  .horizontal-collapse__item {
    flex: 1 1 80%;
  }
} #}
</style>
 {% endblock %}  



  <section class="contentContainer carous mx-auto ">
	<div id="contentContainer" class="trans3d "> 
	<section id="carouselContainer" class="trans3d ">
  {% for categorie in categories %}
<figure id="item" class="carouselItem trans3d"><img class="carouselItemInner" src="{{ asset(categorie.image) }}" style="object-fit: cover;">
  <div class="carouselItemInner"> <a href="{{ path('app_categorie') }}">{{categorie.libelle}} </a></div>

</figure>

	
 {% endfor %} 
 
</section>
{# <div class="btn-link ">
<button id="prevBtn" class="carousel-control prev">Précédent</button>
<button id="nextBtn" class="carousel-control next">Suivant</button>
</div> #}








	</div>


  </section>




{# {% for plat in plats %}
	<div class"card">
<img src="{{ asset(plat.image) }}" style="object-fit: cover;">

	<a href="{{ path('app_plat_cat') }}" class="btn btn-link">Plats</a>

</div>

{% endfor %} #}

{% block javascripts %}
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/1.19.1/TweenMax.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script style="ts">
	// set and cache variables
	var w, container, carousel, item, itemLength, rY, ticker; 
	var rotationY = 0;
	var addX = 0;
	
	$(document).ready(init);
	
	function init()
	{
	    w = $(window);
	    container = $('#contentContainer');
	    carousel = $('#carouselContainer');
	    item = $('.carouselItem');
	
	    itemLength = $('.carouselItem').length;
	
	    rY = 360 / itemLength;
	    radius = Math.round((170) / Math.tan(Math.PI / itemLength));
	
	    // set container 3d props
	    TweenMax.set(container, {perspective: 3500});
	    TweenMax.set(carousel, {z: -(radius)});
	    
	    // create carousel item props
	    for (var i = 0; i < itemLength; i++)
	    {
	        var $item = item.eq(i);
	        var $block = $item.find('.carouselItemInner');
	        
	        TweenMax.set($item, {rotationY: rY * i, z: radius, transformOrigin: "50% 50% " + -radius + "px"});
	        animateIn($item, $block);
	    }
	
	    // Event listeners for buttons
	    $('#prevBtn').on('click', rotateCarousel.bind(null, -1));
	    $('#nextBtn').on('click', rotateCarousel.bind(null, 1));
	    
	    // set looper ticker
	    ticker = setInterval(looper, 5000 / 60); // 60 FPS
	}
	
	function animateIn($item, $block)
	{
	    var $nrX = 360 * getRandomInt(2);
	    var $nrY = 360 * getRandomInt(2);
	        
	    var $nx = -(2000) + getRandomInt(4000);
	    var $ny = -(2000) + getRandomInt(4000);
	    var $nz = -2000 + getRandomInt(2000);
	        
	    var $s = 1.5 + (getRandomInt(10) * .1);
	    var $d = 1 - (getRandomInt(8) * .1);
	    
	    TweenMax.set($item, {autoAlpha: 1, delay: $d});
	    TweenMax.set($block, {z: $nz, rotationY: $nrY, rotationX: $nrX, x: $nx, y: $ny, autoAlpha: 0});
	    TweenMax.to($block, $s, {delay: $d, rotationY: 0, rotationX: 0, z: 0, ease: Expo.easeInOut});
	    TweenMax.to($block, $s - .5, {delay: $d, x: 0, y: 0, autoAlpha: 1, ease: Expo.easeInOut});
	}
	
	// Function to handle rotation manually
	function rotateCarousel(direction) {
	    rotationY += direction * rY;
	    TweenMax.to(carousel, 1, {rotationY: rotationY, ease: Quint.easeOut});
	}

// loops and sets the carousel 3d properties
function looper()
{
    rotationY += 0.5; // Change this value to control the rotation speed
    TweenMax.to(carousel, 1, {rotationY: rotationY, ease: Quint.easeOut});
}

function getRandomInt($n)
{
    return Math.floor((Math.random() * $n) + 1);    
}

</script>



 {% endblock %}  

 {% endblock %}  


{# .carous {
  position: relative;
  margin-top: 40vh;
}

	#contentContainer
	{
		position:absolute;
		margin-left:-500px;
		margin-top:-500px;
		left:50%;
		top:50%;
		width:1000px;
		height:550px;
	}
	
	#carouselContainer
	{
		position:absolute;
		margin-left:-700px;
		margin-top:-450px;
		left:50%;
		top:60%;
		width:1200px;
		height:600px;
	}
	
	.carouselItem
	{
		width:450px;
		height:380px;
		position:absolute;
		left:50%;
		top:50%;
		margin-left:-120px;
     margin-right:120px;
		margin-top:-90px;
		visibility:hidden;
	}
	
  .carouselItemInner 
	{
    width: 450px;
		height:380px;
		position:absolute;
		border:1px solid grey;
    border-radius: 15px 15px 15px 15px;
		
		font-size:72px;
		left:50%;
		top:50%;
		margin-left:-120px;
    margin-right:120px;
		margin-top:-90px;
		text-align:center;
		
    overflow:hidden;
  }



{# a:hover
{
	color:rgba( 255, 255, 255, 1 );
}

  a .carouselItemInner .title 
	{
    display: flex;
    position: relative;
    justify-items: center;
    vertical-align: center;
  overflow: hidden;
    justify-content: center;
		font-family: 'quicksandlight', Helvetica, Arial;
	  font-style: white;
	  text-shadow: -1px -1px 4px rgba(0, 0, 0, .35);
    filter: dropshadow(color=#000FFF, offx=1, offy=1);
		
		text-align:center;
		
  } #}

  {# .carousel-control {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
}

.carousel-control.prev {
    left: 10px;
}

.carousel-control.next {
    right: 10px;
}


</style>

	{% endblock %}
		<main class="main-content">
	<div class="container-fluid col-sm-12 col-md-6 col-lg-4">
  <section class="carous contentContainer">
	<div id="contentContainer" class="trans3d position-relative"> 
	<section id="carouselContainer" class="trans3d">
  {% for categorie in categories %}
		<figure id="item" class="carouselItem trans3d"><img class="carouselItemInner" src="{{ asset(categorie.image) }}" style="object-fit: cover;" ><div class="carouselItemInner trans3d"><a class="carouselItemInner title">{{ (categorie.libelle) }}</a></div> </figure>
   {# <div class='button'>
        <a href="{{ path('app_plat_cat', {'libelle': categorie.libelle}) }}" class="btn btn-link">Plats</a>
        </div> 

	
 {% endfor %} 
</section>
	</div>
  <button id="prevBtn" class="carousel-control prev">Précédent</button>
    <button id="nextBtn" class="carousel-control next">Suivant</button>
  </section>
  </main>
  </div>

{% block javascripts %}
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/1.19.1/TweenMax.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script style="ts">
// set and cache variables
var w, container, carousel, item, itemLength, rY, ticker; 
var rotationY = 0;
var addX = 0;

$(document).ready(init);

function init()
{
    w = $(window);
    container = $('#contentContainer');
    carousel = $('#carouselContainer');
    item = $('.carouselItem');

    itemLength = $('.carouselItem').length;

    rY = 360 / itemLength;
    radius = Math.round((170) / Math.tan(Math.PI / itemLength));

    // set container 3d props
    TweenMax.set(container, {perspective: 3500});
    TweenMax.set(carousel, {z: -(radius)});
    
    // create carousel item props
    for (var i = 0; i < itemLength; i++)
    {
        var $item = item.eq(i);
        var $block = $item.find('.carouselItemInner');
        
        TweenMax.set($item, {rotationY: rY * i, z: radius, transformOrigin: "50% 50% " + -radius + "px"});
        animateIn($item, $block);
    }

    // Event listeners for buttons
    $('#prevBtn').on('click', rotateCarousel.bind(null, -1));
    $('#nextBtn').on('click', rotateCarousel.bind(null, 1));
    
    // set looper ticker
    ticker = setInterval(looper, 5000 / 60); // 60 FPS
}

function animateIn($item, $block)
{
    var $nrX = 360 * getRandomInt(2);
    var $nrY = 360 * getRandomInt(2);
        
    var $nx = -(2000) + getRandomInt(4000);
    var $ny = -(2000) + getRandomInt(4000);
    var $nz = -2000 + getRandomInt(2000);
        
    var $s = 1.5 + (getRandomInt(10) * .1);
    var $d = 1 - (getRandomInt(8) * .1);
    
    TweenMax.set($item, {autoAlpha: 1, delay: $d});
    TweenMax.set($block, {z: $nz, rotationY: $nrY, rotationX: $nrX, x: $nx, y: $ny, autoAlpha: 0});
    TweenMax.to($block, $s, {delay: $d, rotationY: 0, rotationX: 0, z: 0, ease: Expo.easeInOut});
    TweenMax.to($block, $s - .5, {delay: $d, x: 0, y: 0, autoAlpha: 1, ease: Expo.easeInOut});
}

// Function to handle rotation manually
 function rotateCarousel(direction) {
    rotationY += direction * rY;
    TweenMax.to(carousel, 1, {rotationY: rotationY, ease: Quint.easeOut});
}

// loops and sets the carousel 3d properties
 function looper()
{
    rotationY += 0.5; // Change this value to control the rotation speed
    TweenMax.to(carousel, 1, {rotationY: rotationY, ease: Quint.easeOut});
} 

function getRandomInt($n)
{
    return Math.floor((Math.random() * $n) + 1);    
}

</script>

 {% endblock %}  

 {% endblock %}    #}


          {# <img src="image/category/asian_food_cat.jpg">
          <img src="image/category/burger_cat.jpg">
          <img src="image/category/pizza_cat.jpg">
          <img src="image/category/wrap_cat.jpg">
          <img src="image/category/veggie_cat.jpg">
        
            <img src="{{ asset(categorie.image) }}">  
           </div>
           
               </div>
 <div class="swiper-button-prev"></div>
			<div class="swiper-button-next"></div>
			<div class="swiper-pagination" style="bottom: -50px;"></div>

</div> 
{# <carousel-3d>
    <slide v-for="(slide, i) in slides" :index="i" :key="i">
        <template slot-scope="{ index, isCurrent, leftIndex, rightIndex }">
            <img :data-index="index" :class="{ current: isCurrent, onLeft: (leftIndex >= 0), onRight: (rightIndex >= 0) }" :src="slide.src">
        </template>
    </slide>
</carousel-3d> #}
{# <style>
.carousel-home-resources {
  .left-1 {
    transform: translateX(-500px) translateZ(-400px) rotateY(-30deg) !important;
  }
  .right-1 {
    transform: translateX(500px) translateZ(-400px) rotateY(30deg) !important;
  }
}
</style> #}

{# <div id="app"> #}

{# <section class="my-10">
	<h2 class="carousel-3D-swiper-title">Lorem ipsum dolor sit amet</h2>
	<section class="carousel-3D-swiper-section">
		<div class="carousel-3D-swiper">
			<div class="swiper-wrapper" style="max-width: 1200px;">
	          
     
				<div class="swiper-slide ">

					<div class="image-wrapper aspect-video d-flex">
           {% for categorie in categories %}
            <img src="{{ asset(categorie.image) }}">  
            </div>  </div>
            {% endfor %}

<div class="swiper-button-prev"></div>
			<div class="swiper-button-next"></div>
			<div class="swiper-pagination" style="bottom: -50px;"></div>

</div>

		</div>
	</section>
</section>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.4.2/js/swiper.min.js"></script>
{% endblock %}  
 <carousel-3d>
 <slide v-for="(slide, i) in slides" :index="i" :key="i">
        <template slot-scope="{ index, isCurrent, leftIndex, rightIndex }">
          <img src="{{ asset(categorie.image) }}">    
          {# <img src="image 
       </template>
    </slide>
     </carousel-3d> %}
          


{# <script scoped>
new Vue({
  el: '#carousel3d',
  data: {
    slides: 7
  },
  components: {
    'carousel-3d': window['carousel-3d'].Carousel3d,
    'slide': window['carousel-3d'].Slide
  }
});
</script> 
<script src="https://wlada.github.io/vue-carousel-3d/js/carousel-3d.umd.js"></script> 

<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.10/vue.min.js"></script>  



   
	{# <div class="details">
						<h3>Lorem ipsum dolor</h3>
						<span>Web Designer</span>
						<p>Lorem ipsum dolor</p>
					</div> #}
{# <script>
import autoplay from "@/carousel-3d/mixins/autoplay";
import Controls from "@/carousel-3d/Controls";

const noop = () => {
}

export default {
  name: 'carousel3d',
  components: {
    Controls
  },
  props: {
    count: {
      type: [Number, String],
      default: 0
    },
    perspective: {
      type: [Number, String],
      default: 35
    },
    display: {
      type: [Number, String],
      default: 5
    },
    loop: {
      type: Boolean,
      default: true
    },
    animationSpeed: {
      type: [Number, String],
      default: 500
    },
    dir: {
      type: String,
      default: 'rtl'
    },
    width: {
      type: [Number, String],
      default: 360
    },
    height: {
      type: [Number, String],
      default: 270
    },
    border: {
      type: [Number, String],
      default: 1
    },
    space: {
      type: [Number, String],
      default: 'auto'
    },
    startIndex: {
      type: [Number, String],
      default: 0
    },
    clickable: {
      type: Boolean,
      default: true
    },
    disable3d: {
      type: Boolean,
      default: false
    },
    minSwipeDistance: {
      type: Number,
      default: 10
    },
    inverseScaling: {
      type: [Number, String],
      default: 300
    },
    controlsVisible: {
      type: Boolean,
      default: false
    },
    controlsPrevHtml: {
      type: String,
      default: '&lsaquo;'
    },
    controlsNextHtml: {
      type: String,
      default: '&rsaquo;'
    },
    controlsWidth: {
      type: [String, Number],
      default: 50
    },
    controlsHeight: {
      type: [String, Number],
      default: 50
    },
    onLastSlide: {
      type: Function,
      default: noop
    },
    onSlideChange: {
      type: Function,
      default: noop
    },
    bias: {
      type: String,
      default: 'left'
    },
    onMainSlideClick: {
      type: Function,
      default: noop
    },
    oneDirectional: {
      type: Boolean,
      default: false
    }
  },
  data () {
    return {
      viewport: 0,
      currentIndex: 0,
      total: 0,
      dragOffsetX: 0,
      dragStartX: 0,
      dragOffsetY: 0,
      dragStartY: 0,
      mousedown: false,
      zIndex: 998
    }
  },
  mixins: [
    autoplay
  ],
  watch: {
    count () {
      this.computeData()
    }
  },
  computed: {
    isLastSlide () {
      return this.currentIndex === this.total - 1
    },
    isFirstSlide () {
      return this.currentIndex === 0
    },
    isNextPossible () {
      return !(!this.loop && this.isLastSlide)
    },
    isPrevPossible () {
      return !(!this.loop && this.isFirstSlide)
    },
    slideWidth () {
      const vw = this.viewport
      const sw = parseInt(this.width) + (parseInt(this.border, 10) * 2)

      return vw < sw && process.browser ? vw : sw
    },
    slideHeight () {
      const sw = parseInt(this.width, 10) + (parseInt(this.border, 10) * 2)
      const sh = parseInt(parseInt(this.height) + (this.border * 2), 10)
      const ar = this.calculateAspectRatio(sw, sh)

      return this.slideWidth / ar
    },
    visible () {
      const v = (this.display > this.total) ? this.total : this.display
      return v
    },
    hasHiddenSlides () {
      return this.total > this.visible
    },
    leftIndices () {
      let n = (this.visible - 1) / 2

      n = (this.bias.toLowerCase() === 'left' ? Math.ceil(n) : Math.floor(n))

      const indices = []

      for (let m = 1; m <= n; m++) {
        indices.push((this.dir === 'ltr')
            ? (this.currentIndex + m) % (this.total)
            : (this.currentIndex - m) % (this.total))
      }

      return indices
    },
    rightIndices () {
      let n = (this.visible - 1) / 2

      n = (this.bias.toLowerCase() === 'right' ? Math.ceil(n) : Math.floor(n))
      const indices = []

      for (let m = 1; m <= n; m++) {
        indices.push((this.dir === 'ltr')
            ? (this.currentIndex - m) % (this.total)
            : (this.currentIndex + m) % (this.total))
      }

      return indices
    },
    leftOutIndex () {
      let n = (this.visible - 1) / 2

      n = (this.bias.toLowerCase() === 'left' ? Math.ceil(n) : Math.floor(n))
      n++

      if (this.dir === 'ltr') {
        return ((this.total - this.currentIndex - n) <= 0)
            ? (-parseInt(this.total - this.currentIndex - n))
            : (this.currentIndex + n)
      } else {
        return (this.currentIndex - n)
      }
    },
    rightOutIndex () {
      let n = (this.visible - 1) / 2

      n = (this.bias.toLowerCase() === 'right' ? Math.ceil(n) : Math.floor(n))
      n++

      if (this.dir === 'ltr') {
        return (this.currentIndex - n)
      } else {
        return ((this.total - this.currentIndex - n) <= 0)
            ? (-parseInt(this.total - this.currentIndex - n, 10))
            : (this.currentIndex + n)
      }
    }
  },
  methods: {
    /**
     * Go to next slide
     */
    goNext () {
      if (this.isNextPossible) {
        this.isLastSlide ? this.goSlide(0) : this.goSlide(this.currentIndex + 1)
      }
    },
    /**
     * Go to previous slide
     */
    goPrev () {
      if (this.isPrevPossible) {
        this.isFirstSlide ? this.goSlide(this.total - 1) : this.goSlide(this.currentIndex - 1)
      }
    },
    /**
     * Go to slide
     * @param  {String} index of slide where to go
     */
    goSlide (index) {
      this.currentIndex = (index < 0 || index > this.total - 1) ? 0 : index

      if (this.isLastSlide) {
        if (this.onLastSlide !== noop) {
          console.warn('onLastSlide deprecated, please use @last-slide')
        }
        this.onLastSlide(this.currentIndex)

        this.$emit('last-slide', this.currentIndex)
      }

      this.$emit('before-slide-change', this.currentIndex)

      setTimeout(() => this.animationEnd(), this.animationSpeed)
    },
    /**
     * Go to slide far slide
     */
    goFar (index) {
      let diff = (index === this.total - 1 && this.isFirstSlide) ? -1 : (index - this.currentIndex)

      if (this.isLastSlide && index === 0) {
        diff = 1
      }

      const diff2 = (diff < 0) ? -diff : diff
      let timeBuff = 0
      let i = 0

      while (i < diff2) {
        i += 1
        const timeout = (diff2 === 1) ? 0 : (timeBuff)

        setTimeout(() => (diff < 0) ? this.goPrev(diff2) : this.goNext(diff2), timeout)

        timeBuff += (this.animationSpeed / (diff2))
      }
    },
    /**
     * Trigger actions when animation ends
     */
    animationEnd () {
      if (this.onSlideChange !== noop) {
        console.warn('onSlideChange deprecated, please use @after-slide-change')
      }
      this.onSlideChange(this.currentIndex)

      this.$emit('after-slide-change', this.currentIndex)
    },
    /**
     * Trigger actions when mouse is released
     * @param  {Object} e The event object
     */
    handleMouseup () {
      this.mousedown = false
      this.dragOffsetX = 0
      this.dragOffsetY = 0
    },
    /**
     * Trigger actions when mouse is pressed
     * @param  {Object} e The event object
     */
    handleMousedown (e) {
      if (!e.touches) {
        e.preventDefault()
      }

      this.mousedown = true
      this.dragStartX = ('ontouchstart' in window) ? e.touches[0].clientX : e.clientX
      this.dragStartY = ('ontouchstart' in window) ? e.touches[0].clientY : e.clientY
    },
    /**
     * Trigger actions when mouse is pressed and then moved (mouse drag)
     * @param  {Object} e The event object
     */
    handleMousemove (e) {
      if (!this.mousedown) {
        return
      }

      const eventPosX = ('ontouchstart' in window) ? e.touches[0].clientX : e.clientX
      const eventPosY = ('ontouchstart' in window) ? e.touches[0].clientY : e.clientY
      const deltaX = (this.dragStartX - eventPosX)
      const deltaY = (this.dragStartY - eventPosY)

      this.dragOffsetX = deltaX
      this.dragOffsetY = deltaY

      // If the swipe is more significant on the Y axis, do not move the slides because this is a scroll gesture
      if (Math.abs(this.dragOffsetY) > Math.abs(this.dragOffsetX)) {
        return
      }

      if (this.dragOffsetX > this.minSwipeDistance) {
        this.handleMouseup()
        this.goNext()
      } else if (this.dragOffsetX < -this.minSwipeDistance) {
        this.handleMouseup()
        this.goPrev()
      }
    },
    /**
     * A mutation observer is used to detect changes to the containing node
     * in order to keep the magnet container in sync with the height its reference node.
     */
    attachMutationObserver () {
      const MutationObserver = window.MutationObserver ||
          window.WebKitMutationObserver ||
          window.MozMutationObserver

      if (MutationObserver) {
        const config = {
          attributes: true,
          childList: true,
          characterData: true
        }

        this.mutationObserver = new MutationObserver(() => {
          this.$nextTick(() => {
            this.computeData()
          })
        })

        if (this.$el) {
          this.mutationObserver.observe(this.$el, config)
        }
      }
    },

    detachMutationObserver () {
      if (this.mutationObserver) {
        this.mutationObserver.disconnect()
      }
    },
    /**
     * Get the number of slides
     * @return {Number} Number of slides
     */
    getSlideCount () {
      if (this.$slots.default !== undefined) {
        return this.$slots.default.filter((value) => {
          return value.tag !== void 0
        }).length
      }

      return 0
    },
    /**
     * Calculate slide with and keep defined aspect ratio
     * @return {Number} Aspect ratio number
     */
    calculateAspectRatio (width, height) {
      return Math.min(width / height)
    },
    /**
     * Re-compute the number of slides and current slide
     */
    computeData (firstRun) {
      this.total = this.getSlideCount()
      if (firstRun || this.currentIndex >= this.total) {
        this.currentIndex = parseInt(this.startIndex) > this.total - 1 ? this.total - 1 : parseInt(this.startIndex)
      }

      this.viewport = this.$el.clientWidth
    },
    setSize () {
      this.$el.style.cssText += 'height:' + this.slideHeight + 'px;'
      this.$el.childNodes[0].style.cssText += 'width:' + this.slideWidth + 'px;' + ' height:' + this.slideHeight + 'px;'
    }
  },

  mounted () {
    if (!process.server) {
      this.computeData(true)
      this.attachMutationObserver()
      window.addEventListener('resize', this.setSize)

      if ('ontouchstart' in window) {
        this.$el.addEventListener('touchstart', this.handleMousedown)
        this.$el.addEventListener('touchend', this.handleMouseup)
        this.$el.addEventListener('touchmove', this.handleMousemove)
      } else {
        this.$el.addEventListener('mousedown', this.handleMousedown)
        this.$el.addEventListener('mouseup', this.handleMouseup)
        this.$el.addEventListener('mousemove', this.handleMousemove)
      }
    }
  },

  beforeDestroy () {
    if (!process.server) {
      this.detachMutationObserver()

      if ('ontouchstart' in window) {
        this.$el.removeEventListener('touchmove', this.handleMousemove)
      } else {
        this.$el.removeEventListener('mousemove', this.handleMousemove)
      }

      window.removeEventListener('resize', this.setSize)
    }
  }
} 
</script> #}


{# .carousel-3d-container {
  min-height: 1px;
  width: 100%;
  position: relative;
  z-index: 0;
  overflow: hidden;
  margin: 20px auto;
  box-sizing: border-box;
}

.carousel-3d-slider {
  position: relative;
  margin: 0 auto;
  transform-style: preserve-3d;
  -webkit-perspective: 1000px;
  -moz-perspective: 1000px;
  perspective: 1000px;
}   #}





{# <script>
console.log(window);
new Vue({
  el: '#example',
  data: {
    slides: 7
  },
  components: {
    'carousel-3d': window['carousel-3d'].Carousel3d,
    'slide': window['carousel-3d'].Slide
  }
})
</script>
  #}
 {# {% extends 'base.html.twig' %}

{% block title %}The District{% endblock %}

{% block body %}
<section class="container"> 
    
        {% for categorie in categories %}
      
              <div id="slider" >
              
                <img src="{{ asset(categorie.image) }}">
            
                <h2>{{ categorie.libelle }}</h2>
        
        {% endfor %}
        
    </div>
</section>


{% endblock %} 
    {# const images = document.querySelectorAll('#slider img');
    let currentIndex = 0;

    // Fonction pour afficher l'image suivante
    function showNextImage() {
        images[currentIndex].style.display = 'none'; // Masquer l'image actuelle
        currentIndex = (currentIndex + 1) % images.length; // Passer à l'image suivante (boucle)
        images[currentIndex].style.display = 'column'; // Afficher la nouvelle image
    } #}


    
  

   

        	

